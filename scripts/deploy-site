#!/bin/bash

#--------------------------------------------------------------------
# Student Media Interactive
# Deploy Script
#
# Takes a project and deploys all of the files in the mirror
# directory to the web server.
# 
#-------------------------------------------------------------------

#
# Pre-execution
#

# some unix constants
USER_INTERRUPT=13
E_BADARGS=65
ERROR=1

# some script variables
TEMPDIR=temp.$$    # unique name for a temp dir based on pid
DEPLOY_FILE="last_deploy" # holds data about deployed copy of site
COPY_COMMAND="scp" # copy command defaults to scp, but rsync users can override
COPY_ARGS="-rq"   # in their project_info file

usage ()
{
	echo
	echo "Student Media Interactive Site Deploy Script"
	echo
	echo "Usage: $0 <COMMAND>"
	echo
	echo "Where COMMAND is:"
	echo "	test	Deploy to test environment"
	echo "	live	Deploy to test environment"
	echo
    if [[ $1 ]]
    then
        exit $1;
    fi
	exit $ERROR 
}

# handle script arguments
case "$1" in
	live) DEPLOY_SITE=LIVE;;
	test) DEPLOY_SITE=TEST;;
	*) usage $E_BADARGS;;
esac


# ensure project_info file exists
# and load data for this project 
if [[ -r ../project_info ]]
then
    . ../project_info
else
    echo "!!!"
    echo "ERROR: ../project_info not a readable file"
    echo "!!!"
    exit $ERROR
fi

# subversion info
# ensure ../ is a subversion repository
if svn info ../ >/dev/null 2>/dev/null
then
    # grab subversion info
    SVN_URL=`svn info ../ | grep URL | awk '{ print $2; }' | sed -e "s/\/trunk//"`
    SVN_REMOTEREV=`svn info $SVN_URL | grep Revision | awk '{ print $2; }'`
    SVN_LOCALREV=`svn info ../ | grep Revision | awk '{ print $2; }'`
    SVN_AUTHOR=`svn info ../ | grep 'Last Changed Author' | awk '{ print $4; }'`
    SVN_DATE=`svn info ../ | grep Date | awk 'BEGIN { FS=": " } ; { print $2; }'`
    SVN_CHANGES=`svn st ../ --ignore-externals | grep -v ^X`
else
    echo "!!!"
    echo "ERROR: ../ is not a subversion repository"
    echo "!!!"
    exit $ERROR
fi
echo

# the loaded file should have two sets of variables with data for
#+ connecting to a server.  these will be prefixed with LIVE_ and
#+ TEST_ for the different deploy environments

# we first build the correct variable names based on the argument
DEPLOY_SERVER=${DEPLOY_SITE}_SERVER
DEPLOY_USER=${DEPLOY_SITE}_USER
DEPLOY_PATH=${DEPLOY_SITE}_PATH

# then we dereference these variable names to get the data from
#+ the loaded file
DEPLOY_SERVER=${!DEPLOY_SERVER}
DEPLOY_USER=${!DEPLOY_USER}
DEPLOY_PATH=${!DEPLOY_PATH}

# now check to make sure these variables are all there
if [[ -n $DEPLOY_SERVER && -n $DEPLOY_USER && -n $DEPLOY_PATH ]]
then
    # build a destination string appropriate for scp or rsync command
    DESTINATION="$DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH"
else
    echo "!!!"
    echo "ERROR: variables not set correctly in ../project_info" 
    echo "!!!"
    exit $ERROR
fi

#
# if we are deploying to live, we need some extra checks
# 	1. we should have the latest revision of the code
#   2. there should be no uncommitted changes to the working copy
#
if [[ $DEPLOY_SITE == "LIVE" ]]
then
	if [[ $SVN_REMOTEREV != $SVN_LOCALREV ]]
	then
# if no difference between two revisions, automatically update,
# otherwise die with error
		if [[ `svn diff ../ -r$SVN_REMOTEREV | grep -v ^$ | wc -l` -eq 0 ]]
		then
			echo "Working copy revision does not match latest,"
			echo " but no differences exist between the two."
			echo "Automatically updating..."
			svn up ../
		else
			echo "!!!"
			echo "ERROR: You do not have the latest revision of this project."
			echo "!!!"
			echo ""
			echo "Latest revision: $SVN_REMOTEREV"
			echo "Local revision: $SVN_LOCALREV"
			echo "Please update your working copy."
			exit $ERROR
		fi
	fi
	if [[ `echo $SVN_CHANGES | grep -v ^$ | wc -l` -ne 0 ]]
	then
		echo "!!!"
		echo "ERROR: You can't deploy to the live server with uncommitted changes."
		echo "!!!"
		echo ""
		echo "Please commit the following changes:"
		echo ""
		echo $SVN_CHANGES
		exit $ERROR
	fi
fi

#
# Script Execution
#

# display a nice friendly header 
echo "-= Deploying $PROJECT_NAME to Live Production Site =-"
echo "   Revision: $SVN_REV"
echo "   Last Changed User: $SVN_AUTHOR"
echo "   Last Changed Date: $SVN_DATE"

#  Cleans up the temp file if script interrupted by control-c.
trap "echo Caught break... cleaning up.;rm -rf $TEMPDIR; exit $USER_INTERRUPT" TERM INT

# make a copy of the site mirror in a temporary dir
svn export -q ../mirror/ $TEMPDIR

# svn:externals definitions are not currently read properly by svn export
# (see svn issue #2429)
#
# This has been fixed in SVN r25707
#
#svn export -q ../mirror/code/common $TEMPDIR/code/common
#svn export -q ../mirror/css/common $TEMPDIR/css/common
#svn export -q ../mirror/img/ads $TEMPDIR/img/ads

# now update the live-site tag to reflect new site
if [[ $DEPLOY_SITE == "LIVE" ]]
then
    echo "$PROJECT_NAME" > $TEMPDIR/$DEPLOY_FILE
    echo "Deploy Date: `date`" >> $TEMPDIR/$DEPLOY_FILE
    echo "Subversion Revision: $SVN_REV" >> $TEMPDIR/$DEPLOY_FILE
    echo "Subversion Author: $SVN_AUTHOR" >> $TEMPDIR/$DEPLOY_FILE
    echo "Subversion Timestamp: $SVN_DATE" >> $TEMPDIR/$DEPLOY_FILE
fi

# change permissions on all of the files so that they are world readable
chmod -R a+r $TEMPDIR/*

# the main event: actually copy the files over to the server
# this will display a password prompt for the user specified above
$COPY_COMMAND $COPY_ARGS $TEMPDIR/* $DESTINATION


# ..aaaand clean up after ourselves.  it's like we were never here!
rm -rf $TEMPDIR

# happy exit
exit 0
